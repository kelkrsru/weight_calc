# Generated by Django 5.1.1 on 2024-09-28 05:54

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('PRODUCTROW_ID', models.PositiveIntegerField(db_index=True, verbose_name='ID товарной позиции')),
                ('OWNER_ID', models.PositiveIntegerField(verbose_name='ID владельца')),
                ('OWNER_TYPE', models.CharField(max_length=256, verbose_name='Тип владельца')),
                ('PRODUCT_ID', models.PositiveIntegerField(verbose_name='ID товара в каталоге')),
                ('PRODUCT_NAME', models.CharField(max_length=1024, verbose_name='Наименование товарной позиции')),
                ('ORIGINAL_PRODUCT_NAME', models.CharField(max_length=1024, verbose_name='Наименование товара в каталоге')),
                ('PRODUCT_DESCRIPTION', models.TextField(blank=True, verbose_name='Описание товара')),
                ('PRICE', models.DecimalField(decimal_places=2, help_text='Цена за единицу товарной позиции с учетом скидок и налогов', max_digits=12, null=True, verbose_name='Цена со скидкой и налогом')),
                ('PRICE_EXCLUSIVE', models.DecimalField(decimal_places=2, help_text='Цена за единицу товарной позиции с учетом скидок, но без учета налогов', max_digits=12, null=True, verbose_name='Цена со скидкой, без налога')),
                ('PRICE_NETTO', models.DecimalField(decimal_places=2, help_text='Цена за единицу товарной позиции без учета скидок и без учета налогов', max_digits=12, null=True, verbose_name='Цена без скидки, без налога')),
                ('PRICE_BRUTTO', models.DecimalField(decimal_places=2, help_text='Цена за единицу товарной позиции с учетом налогов, но без учета скидок', max_digits=12, null=True, verbose_name='Цена с налогом, без скидки')),
                ('PRICE_ACCOUNT', models.DecimalField(decimal_places=2, help_text='Цена за единицу товарной позиции с учетом скидок и налогов, конвертированная в валюту отчетов', max_digits=12, null=True, verbose_name='Цена со скидкой и налогом в валюте отчетов')),
                ('QUANTITY', models.DecimalField(decimal_places=2, max_digits=12, null=True, verbose_name='Количество')),
                ('DISCOUNT_TYPE_ID', models.PositiveSmallIntegerField(help_text='Может быть 1 для скидки в абсолютном значении и 2 для скидки в процентах. По умолчанию равно 2', verbose_name='Тип скидки')),
                ('DISCOUNT_RATE', models.DecimalField(decimal_places=2, max_digits=5, null=True, verbose_name='Процент скидки')),
                ('DISCOUNT_SUM', models.DecimalField(decimal_places=2, max_digits=12, null=True, verbose_name='Сумма скидки')),
                ('TAX_RATE', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Процент налога')),
                ('TAX_INCLUDED', models.CharField(help_text='Может иметь значения "Y" или "N"', max_length=2, verbose_name='Налог включен в цену')),
                ('CUSTOMIZED', models.CharField(help_text='Может иметь значения "Y" или "N". Назначение поля неизвестно', max_length=2, verbose_name='Кастомизированное')),
                ('MEASURE_CODE', models.PositiveIntegerField(verbose_name='Код единицы измерения')),
                ('MEASURE_NAME', models.CharField(max_length=10, verbose_name='Единица измерения')),
                ('SORT', models.PositiveIntegerField(verbose_name='Сортировка')),
                ('XML_ID', models.PositiveIntegerField(blank=True, null=True, verbose_name='XML_ID')),
                ('TYPE', models.PositiveSmallIntegerField(help_text='1 - простой товар, 4 - торговое предложение/вариация', verbose_name='Тип товарной позиции')),
                ('STORE_ID', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='ID склада')),
                ('RESERVE_ID', models.PositiveIntegerField(blank=True, null=True, verbose_name='ID резерва')),
                ('DATE_RESERVE_END', models.CharField(blank=True, max_length=256, null=True, verbose_name='Дата истечения резерва')),
                ('RESERVE_QUANTITY', models.DecimalField(decimal_places=2, max_digits=12, null=True, verbose_name='Количество в резерве')),
                ('PORTAL', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.portals', verbose_name='Портал')),
            ],
            options={
                'verbose_name': 'Товарная позиция',
                'verbose_name_plural': 'Товарные позиции',
                'indexes': [models.Index(fields=['PRODUCTROW_ID', 'PORTAL'], name='PRODUCTROW_ID_PORTAL_index')],
                'unique_together': {('PRODUCTROW_ID', 'PORTAL')},
            },
        ),
    ]
